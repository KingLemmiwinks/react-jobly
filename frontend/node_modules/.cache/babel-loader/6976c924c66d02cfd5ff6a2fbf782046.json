{"ast":null,"code":"var _jsxFileName = \"/home/lemmiwinks/react-jobly/frontend/src/Jobs.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport JobCard from \"./JobCard\";\nimport SearchForm from \"./SearchForm\";\nimport JoblyApi from \"./api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Jobs() {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [jobs, setJobs] = useState([]);\n  const [formData, setFormData] = useState({\n    search: \"\"\n  });\n  const changeHandler = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(fdata => ({\n      ...fdata,\n      [name]: value\n    }));\n  };\n  const submitHandler = async e => {\n    e.preventDefault();\n    const searchResults = await JoblyApi.getJobs(formData.search);\n    setJobs(searchResults);\n    setFormData({\n      search: \"\"\n    });\n  };\n  const getJobs = () => {\n    JoblyApi.getJobs().then(companies => {\n      setJobs(companies);\n      setIsLoading(false);\n    });\n  };\n  useEffect(() => {\n    if (formData === undefined || formData == null) {\n      setIsLoading(true);\n    } else {\n      setIsLoading(false);\n    }\n  }, [formData]);\n  useEffect(() => {\n    getJobs();\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading \\u2026\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-5\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center pt-3\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        md: 8,\n        children: [/*#__PURE__*/_jsxDEV(SearchForm, {\n          changeHandler: changeHandler,\n          submitHandler: submitHandler,\n          formData: formData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), jobs.map(job => /*#__PURE__*/_jsxDEV(JobCard, {\n          equity: job.equity,\n          salary: job.salary,\n          title: job.title\n        }, job.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)), jobs !== [] && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No Jobs Found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(Jobs, \"MOJBsXnuVbfyLIG5wkHAOKLSK2I=\");\n_c = Jobs;\nvar _c;\n$RefreshReg$(_c, \"Jobs\");","map":{"version":3,"names":["React","useEffect","useState","Container","Row","Col","JobCard","SearchForm","JoblyApi","jsxDEV","_jsxDEV","Jobs","_s","isLoading","setIsLoading","jobs","setJobs","formData","setFormData","search","changeHandler","e","name","value","target","fdata","submitHandler","preventDefault","searchResults","getJobs","then","companies","undefined","children","fileName","_jsxFileName","lineNumber","columnNumber","className","md","map","job","equity","salary","title","id","_c","$RefreshReg$"],"sources":["/home/lemmiwinks/react-jobly/frontend/src/Jobs.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport JobCard from \"./JobCard\";\nimport SearchForm from \"./SearchForm\";\nimport JoblyApi from \"./api\";\n\nexport default function Jobs() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [jobs, setJobs] = useState([]);\n  const [formData, setFormData] = useState({ search: \"\" });\n\n  \n\n  const changeHandler = (e) => {\n    const { name, value } = e.target;\n    setFormData((fdata) => ({\n      ...fdata,\n      [name]: value,\n    }));\n  };\n\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    const searchResults = await JoblyApi.getJobs(formData.search);\n    setJobs(searchResults);\n    setFormData({ search: \"\" });\n  };\n\n  const getJobs = () => {\n    JoblyApi.getJobs().then((companies) => {\n      setJobs(companies);\n      setIsLoading(false);\n    });\n  }\n\n  useEffect(() => {\n    if (formData === undefined || formData == null) {\n      setIsLoading(true);\n    } else {\n      setIsLoading(false);\n    }\n  }, [formData]);\n\n  useEffect(() => {\n    getJobs();\n  }, []);\n\n  if (isLoading) {\n    return <p>Loading &hellip;</p>;\n  }\n  return (\n    <Container className=\"mt-5\">\n      <Row className=\"justify-content-center pt-3\">\n        <Col md={8}>\n          <SearchForm\n            changeHandler={changeHandler}\n            submitHandler={submitHandler}\n            formData={formData}\n          />\n          {jobs.map((job) => (\n            <JobCard\n              equity={job.equity}\n              key={job.id}\n              salary={job.salary}\n              title={job.title}\n            />\n          ))}\n          {jobs !== [] && <p>No Jobs Found</p>}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}