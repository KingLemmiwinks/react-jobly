{"ast":null,"code":"var _jsxFileName = \"/home/lemmiwinks/react-jobly/frontend/src/Company.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport JobCard from \"./JobCard\";\nimport UserContext from \"./UserContext\";\nimport JoblyApi from \"./api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Company() {\n  _s();\n  const {\n    currentUser,\n    setCurrentUser\n  } = useContext(UserContext);\n  const [isLoading, setIsLoading] = useState(true);\n  const [company, setCompany] = useState({});\n  const [jobs, setJobs] = useState([]);\n  const {\n    handle\n  } = useParams();\n  const applyHandler = id => {\n    JoblyApi.applyToJob(currentUser.username, id).then(() => {\n      JoblyApi.getCurrentUser(currentUser.username).then(updatedUser => {\n        setCurrentUser(updatedUser);\n      });\n    });\n  };\n  const checkAppliedFor = id => {\n    if (currentUser.applications !== undefined && currentUser.applications !== null) {\n      if (currentUser.applications.indexOf(id) >= 0) {\n        return true;\n      }\n      return false;\n    } else {\n      return false;\n    }\n  };\n  useEffect(() => {\n    async function getCompany() {\n      console.log(handle);\n      let company = await JoblyApi.getCompany(handle);\n      console.log(company);\n      setCompany(company);\n      setJobs(company.jobs);\n      setIsLoading(false);\n    }\n    getCompany();\n  }, [handle]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading \\u2026\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-5\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center pt-3\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        md: 8,\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"mt-5\",\n          children: company.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: company.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), jobs.map(job => /*#__PURE__*/_jsxDEV(JobCard, {\n          appliedFor: checkAppliedFor(job.id),\n          applyHandler: applyHandler,\n          equity: job.equity,\n          id: job.id,\n          salary: job.salary,\n          title: job.title\n        }, job.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)), jobs === [] && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No Jobs Found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(Company, \"rhPsGozLGFwv/tcraDKVnFpawiI=\", false, function () {\n  return [useParams];\n});\n_c = Company;\nvar _c;\n$RefreshReg$(_c, \"Company\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useParams","Container","Row","Col","JobCard","UserContext","JoblyApi","jsxDEV","_jsxDEV","Company","_s","currentUser","setCurrentUser","isLoading","setIsLoading","company","setCompany","jobs","setJobs","handle","applyHandler","id","applyToJob","username","then","getCurrentUser","updatedUser","checkAppliedFor","applications","undefined","indexOf","getCompany","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","className","md","name","description","map","job","appliedFor","equity","salary","title","_c","$RefreshReg$"],"sources":["/home/lemmiwinks/react-jobly/frontend/src/Company.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport JobCard from \"./JobCard\";\nimport UserContext from \"./UserContext\";\nimport JoblyApi from \"./api\";\n\nexport default function Company() {\n  const { currentUser, setCurrentUser } = useContext(UserContext);\n  const [isLoading, setIsLoading] = useState(true);\n  const [company, setCompany] = useState({});\n  const [jobs, setJobs] = useState([]);\n  const { handle } = useParams();\n\n  \n\n  const applyHandler = (id) => {\n    JoblyApi.applyToJob(currentUser.username, id).then(() => {\n      JoblyApi.getCurrentUser(currentUser.username).then((updatedUser) => {\n        setCurrentUser(updatedUser);\n      });\n    });\n  };\n\n  const checkAppliedFor = (id) => {\n    if (currentUser.applications !== undefined && currentUser.applications !== null) {\n      if (currentUser.applications.indexOf(id) >= 0) {\n        return true;\n      }\n      return false;\n    } else {\n      return false;\n    }\n  };\n\n  useEffect(() => {\n    async function getCompany() {\n      console.log(handle);\n      let company = await JoblyApi.getCompany(handle);\n      console.log(company);\n      setCompany(company);\n      setJobs(company.jobs);\n      setIsLoading(false);\n    }\n    getCompany();\n  }, [handle]);\n\n  if (isLoading) {\n    return <p>Loading &hellip;</p>;\n  }\n  return (\n    <Container className=\"mt-5\">\n      <Row className=\"justify-content-center pt-3\">\n        <Col md={8}>\n          <h4 className=\"mt-5\">{company.name}</h4>\n          <p>{company.description}</p>\n          {jobs.map((job) => (\n            <JobCard\n              appliedFor={checkAppliedFor(job.id)}\n              applyHandler={applyHandler}\n              equity={job.equity}\n              id={job.id}\n              key={job.id}\n              salary={job.salary}\n              title={job.title}\n            />\n          ))}\n          {jobs === [] && <p>No Jobs Found</p>}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}